TITLE "IFACTL_c";

FUNCTION SRFFE (S, R, CLK, CLRN, PRN, ENA)	RETURNS (Q);
FUNCTION SRFF  (S, R, CLK, CLRN, PRN)		RETURNS (Q);
FUNCTION DFF      (D, CLK, CLRN, PRN)		RETURNS (Q);
FUNCTION DFFE     (D, CLK, CLRN, PRN, ENA)	RETURNS (Q);

FUNCTION lpm_ff (data[LPM_WIDTH-1..0], clock, enable, sclr, sset, sload, aclr, aset, aload)
   WITH (LPM_WIDTH, LPM_AVALUE, LPM_SVALUE, LPM_FFTYPE)
   RETURNS (q[LPM_WIDTH-1..0]);

FUNCTION lpm_compare (dataa[LPM_WIDTH-1..0], datab[LPM_WIDTH-1..0], clock, aclr)
   WITH (LPM_WIDTH, LPM_REPRESENTATION, LPM_PIPELINE, CHAIN_SIZE, ONE_INPUT_IS_CONSTANT)
   RETURNS (alb, aeb, agb, ageb, aneb, aleb);

FUNCTION lpm_mux (data[LPM_SIZE-1..0][LPM_WIDTH-1..0], sel[LPM_WIDTHS-1..0], clock, aclr) 
   WITH (LPM_WIDTH, LPM_SIZE, LPM_WIDTHS, LPM_PIPELINE)
   RETURNS (result[LPM_WIDTH-1..0]);


----- Funktions-Codes fuer allg. Interface-Karte (IFA) -----

CONSTANT C_RD_IRM			= H"C9";
CONSTANT C_RD_CNTRL			= H"CA";
CONSTANT C_RD_ID			= H"CC";
CONSTANT C_RD_vers			= H"CD";
CONSTANT C_RD_echo			= H"89";
CONSTANT C_RD_IF_Mode		= H"97";
CONSTANT C_rd_I2C			= H"98";
CONSTANT C_rd_FWL_Data		= H"9C";-- Data   für Firmware-Loader der IFA
CONSTANT C_rd_FWL_STS		= H"9D";-- Status für Firmware-Loader der IFA
CONSTANT C_rd_ME_VW_Err		= H"D3";-- Error-Counter ME-VW
CONSTANT C_rd_ME_Data_Err	= H"D4";-- Error-Counter ME-Data
CONSTANT C_rd_IFP_LED		= H"9E";-- IF-Piggy 'FG 380.751' LED-Port
CONSTANT C_rd_IFP_IO		= H"9F";-- IF-Piggy 'FG 380.751' Out/LED's/In
CONSTANT C_rd_IFP_ID		= H"8E";-- IF-Piggy-ID



CONSTANT C_WR_SW1			= H"06";
CONSTANT C_WR_IRM			= H"12";
CONSTANT C_WR_ECHO			= H"13";
CONSTANT C_WR_IF_Mode		= H"60";
CONSTANT C_WR_FWL_Data		= H"65";-- Data  für Firmware-Loader der IFA
CONSTANT C_WR_FWL_Ctrl		= H"66";-- Ctrl. für Firmware-Loader der IFA
CONSTANT C_WR_I2C			= H"61";
CONSTANT C_WR_IFP_LED		= H"69";-- IF-Piggy 'FG 380.751' LED-Port
CONSTANT C_WR_IFP_Out		= H"6A";-- IF-Piggy 'FG 380.751' Out/LED's/In

CONSTANT C_Reset_CMD		= H"01";
CONSTANT C_res_vw_err		= H"7D";
CONSTANT C_res_broadcast	= H"7E";
CONSTANT C_set_broadcast	= H"7F";


SUBDESIGN IFACTL_c

    (
	CLK,					-- System-Clock  
	IFA_ADR[7..0],			-- IF-Karten-Adresse
    FC_Str,					-- Funktionscode-Strobe	 ______+-------+_______
    Clr_After_RD,			-- Funktionscode-Strobe	 ________________++_______
--  FC_Str_Piggy,			-- FC-Strobe-Piggy       ___+-------+____
	FC[7..0],				-- Funktionscode
	DI[15..0],				-- Daten-Sollwert Intern
	DIW[15..0],				-- Daten-Istwert
	STS[7..0],				-- 8 Bit Status von der VG-Leiste
	INRM[7..0],				-- 8 Bit Interrupt-Maske
	IFA_Ctrl[7..0],			-- IFA Internes Control-Status
	IFA_ID[7..0],			-- IFA Identifikations-Code
	IFP_ID[7..0],			-- IF-Piggy Identifikations-Code
	IFP_In,					-- IF-Piggy Input
	IFA_Epld_Vers[7..0],	-- IFA Epld-Versions-Nummer
	I2C_Data[12..0],		-- Daten I2C-Bus 
	FWL_Data_STS[15..0],	-- Data oder Status vom Firmware-Loader der IFA 
	ME_VW_Err[15..0],		-- Error-Counter ME-VW
	ME_Data_Err[15..0],		-- Error-Counter ME-Data
	IF_Mode[15..0],			-- Reg. Interface-Karten-Mode
	SCLR					-- syn. Clear
				:	INPUT;

	IFA_SD_Mux_Sel[3..0],	-- Selekt des Muliplexers für Status und Daten der IFA
	IFA_SD_Mux[15..0],		-- Ausgang des Muliplexers für Status und Daten der IFA
	VG_Data[15..0],			-- Daten-Ausgang im IFA-Mode zur VG-Leiste
	SEND_STR,				-- Send-Strobe zum Starten des 'EE-FlipFlops' für den Senders '6408'
	FC_EXT,					-- Strobe zur Anzeige eines Datenzugriffes (nur ext. Daten)
	IFA_FC_INT,				-- Funktionscodes für IFA
	WR_I2C,					-- Write Daten des I2C-Bus
	WR_IRM,					-- Write Interrupt-Maske
	WR_FWL_Data,			-- Write Data  für Firmware-Loader der IFA
	WR_FWL_Ctrl,			-- Write Ctrl. für Firmware-Loader der IFA
	RD_FWL_Data,			-- Read  Data  für Firmware-Loader der IFA
	RD_FWL_STS,				-- Read Status für Firmware-Loader der IFA
	RD_ME_VW_Err,			-- Error-Counter ME-VW-Error
	RD_ME_Data_Err,			-- Error-Counter ME-Data_Error
	WR_CLR_ME_VW_Err,		-- Clear Error-Counter ME-VW
	WR_CLR_ME_Data_Err,		-- Clear Error-Counter ME-Data
	IFP_Led[15..0],			-- IF-Piggy 'FG 380.751' LED-Port
	IFP_LED_Out[15..0],		-- IF-Piggy 'FG 380.751' Out/LED's
	Broad_EN,				-- Flag, für Broadcast-Enable
    Reset_CMD,				-- Reset Command (FC = 01) 
    res_vw_err				-- Reset VW-Error (in 'SerPar_a') 
				:	OUTPUT;
    )



VARIABLE

	v_ED   	  : LPM_FF WITH (LPM_WIDTH=16);
	v_IFP_LED : LPM_FF WITH (LPM_WIDTH=16);
	v_IFP_Out : LPM_FF WITH (LPM_WIDTH=16);
	v_VG_Data : LPM_FF WITH (LPM_WIDTH=16);
	v_VGD_en  : DFF;						-- Enable IFA-Daten zur VG-Leiste


	v_FC_INT    	: DFF; 
	v_FC_EXT    	: DFF; 
	v_SEND_STR   	: DFF;
	v_WR_IRM     	: DFF;
	v_res_vw_err	: DFF;
	v_reset_cmd		: DFF;
	v_WR_I2C     	: DFF;
	v_WR_FWL_Data	: DFF;-- Data  für Firmware-Loader der IFA
	v_WR_FWL_Ctrl	: DFF;-- Ctrl. für Firmware-Loader der IFA
	V_WR_IFP_LED	: DFF;-- IF-Piggy 'FG 380.751' LED-Port
	V_WR_IFP_Out	: DFF;-- IF-Piggy 'FG 380.751' Out/LED's/In

	v_Broad_EN  	: SRFF;

	v_RD_IRM    	: DFF; 
	v_RD_CNTRL  	: DFF; 
	v_RD_ID     	: DFF; 
	v_RD_vers   	: DFF; 
	v_RD_echo    	: DFF;
	v_RD_STS     	: DFF;
	v_RD_I2C		: DFF;
	v_RD_IF_Mode	: DFF;
	v_rd_FWL_Data	: DFF;	-- Data   für Firmware-Loader der IFA
	v_rd_FWL_STS	: DFF;	-- Status für Firmware-Loader der IFA

	v_rd_ME_VW_Err		: DFF;	-- Error-Counter VW-Error
	v_rd_ME_Data_Err	: DFF;	-- Error-Counter Data-Error
	v_wr_CLR_ME_VW_Err	: DFF;	-- Clear Error-Counter ME-Error1
	v_wr_CLR_ME_Data_Err: DFF;	-- Clear Error-Counter ME-Error1

	v_rd_IFP_LED	: DFF;-- IF-Piggy 'FG 380.751' LED-Port
	v_rd_IFP_IO		: DFF;-- IF-Piggy 'FG 380.751' Out/LED's/In
	v_rd_IFP_ID		: DFF;-- IF-Piggy-ID
 

	v_IFA_SD_mux	: LPM_MUX WITH (LPM_WIDTH=16, LPM_SIZE=15, LPM_WIDTHS=4, LPM_PIPELINE = 1);
		-- LPM_WIDTH	=	Width of the data[][] and result[] ports. 
		-- LPM_SIZE		=	Number of input buses to the multiplexer. LPM_SIZE <= 2 ^ LPM_WIDTHS.
		-- LPM_WIDTHS	=	Width of the sel[] input port.
		
	v_mux_sel[3..0] 		:	NODE; -- Sel für Multiplexer

BEGIN

--+==========================================================================
--| 				dekodierte Funktionscode Strobes   
--+==========================================================================

--+--------------------------------------------------------------------------
--| v_IFA_FC_INT (dekodierte Funktionscodes der Interface-Karte 'IFA')   
--+--------------------------------------------------------------------------
v_FC_INT.(D, CLK, CLRN) =
	 ( (  (fc[] == C_RD_IRM) 	   # (fc[] == C_RD_CNTRL)	   # (fc[] == C_RD_ID)
		# (fc[] == C_RD_Vers)	   # (fc[] == C_RD_Echo)	   # (fc[] == C_RD_IF_Mode)
		# (fc[] == C_RD_I2C)
		# (fc[] == C_rd_FWL_Data)  # (fc[] == C_rd_FWL_STS)
		# (fc[] == C_rd_ME_VW_Err) # (fc[] == C_rd_ME_Data_Err)
		# (fc[] == C_RD_IFP_LED)   # (fc[] == C_RD_IFP_IO)	   # (fc[] == C_RD_IFP_ID)

		# (fc[] == C_WR_IRM)	   # (fc[] == C_WR_Echo)
		# (fc[] == C_WR_IF_Mode)   # (fc[] == C_WR_I2C)
		# (fc[] == C_WR_FWL_Data)  # (fc[] == C_WR_FWL_Ctrl)
		# (fc[] == C_WR_IFP_LED)   # (fc[] == C_WR_IFP_Out)

		# (fc[] == C_res_vw_err)   # (fc[] == C_res_broadcast) # (fc[] == C_set_broadcast)), clk, NOT SCLR);


--+--------------------------------------------------------------------------
--| v_FC_Ext (Strobe zur Anzeige eines Datenzugriffes (nur ext. Daten))   
--+--------------------------------------------------------------------------
v_FC_EXT.(D, CLK, CLRN)  = ( NOT v_FC_INT & fc_str, clk, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für Status Lesen mit den Funktioncode's === C0 bis CF ===    
--+--------------------------------------------------------------------------
v_RD_IRM     .(D, CLK, CLRN) = (((fc[] == C_RD_IRM  )    & fc_str), CLK, NOT SCLR);
v_RD_CNTRL   .(D, CLK, CLRN) = (((fc[] == C_RD_CNTRL)	 & fc_str), CLK, NOT SCLR);
v_RD_ID      .(D, CLK, CLRN) = (((fc[] == C_RD_ID   )    & fc_str), CLK, NOT SCLR);
v_RD_vers    .(D, CLK, CLRN) = (((fc[] == C_RD_vers )    & fc_str), CLK, NOT SCLR);

v_RD_STS     .(D, CLK, CLRN) = (( (fc7 & fc6 & NOT FC5 & NOT FC4)& NOT
											(	(fc[] == C_RD_IRM)
											 OR	(fc[] == C_RD_CNTRL)
											 OR	(fc[] == C_RD_ID )
											 OR	(fc[] == C_RD_vers )) & fc_str), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für Echo-Daten Lesen    
--+--------------------------------------------------------------------------
v_RD_echo    .(D, CLK, CLRN) = (((fc[] == C_RD_echo )    & fc_str), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| Send-Strobe zum Starten des 'EE-FlipFlops' für den Senders '6408' 
--+--------------------------------------------------------------------------
v_SEND_STR   .(D, CLK, CLRN) = ( fc7 AND fc_str, CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für Daten Schreiben    
--+--------------------------------------------------------------------------
v_WR_IRM     .(D, CLK, CLRN) = (((fc[] == C_WR_IRM  )   & fc_str), CLK, NOT SCLR);
v_res_vw_err .(D, CLK, CLRN) = (((fc[] == C_res_vw_err) & fc_str), CLK, NOT SCLR);
v_reset_cmd  .(D, CLK, CLRN) = (((fc[] == C_reset_cmd)  & fc_str), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für I2C-Bus     
--+--------------------------------------------------------------------------
v_RD_I2C     .(D, CLK, CLRN) = (((fc[] == C_RD_I2C)      & fc_str), CLK, NOT SCLR);
v_WR_I2C     .(D, CLK, CLRN) = (((fc[] == C_WR_I2C)      & fc_str), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für Firmware-Loader     
--+--------------------------------------------------------------------------
v_WR_FWL_Data	.(D, CLK, CLRN) = (((fc[] == c_WR_FWL_Data)	& fc_str), CLK, NOT SCLR);
v_WR_FWL_Ctrl	.(D, CLK, CLRN) = (((fc[] == c_WR_FWL_Ctrl) & fc_str), CLK, NOT SCLR);
v_rd_FWL_Data	.(D, CLK, CLRN) = (((fc[] == c_rd_FWL_Data) & fc_str), CLK, NOT SCLR);
v_rd_FWL_STS	.(D, CLK, CLRN) = (((fc[] == c_rd_FWL_STS)  & fc_str), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für ME-Error-Counter     
--+--------------------------------------------------------------------------
v_rd_ME_VW_Err	.(D, CLK, CLRN) = (((fc[] == c_rd_ME_VW_Err) & fc_str), CLK, NOT SCLR);
v_rd_ME_Data_Err	.(D, CLK, CLRN) = (((fc[] == c_rd_ME_Data_Err) & fc_str), CLK, NOT SCLR);

v_wr_CLR_ME_VW_Err	.(D, CLK, CLRN) = (((fc[] == c_rd_ME_VW_Err)   & Clr_After_RD), CLK, NOT SCLR);
v_wr_CLR_ME_Data_Err.(D, CLK, CLRN) = (((fc[] == c_rd_ME_Data_Err) & Clr_After_RD), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| FKT-Codes für IF-Piggy     
--+--------------------------------------------------------------------------
v_WR_IFP_LED	.(D, CLK, CLRN) = (((fc[] == c_WR_IFP_LED)	& fc_str), CLK, NOT SCLR);
v_WR_IFP_Out	.(D, CLK, CLRN) = (((fc[] == c_WR_IFP_Out) 	& fc_str), CLK, NOT SCLR);
v_rd_IFP_LED	.(D, CLK, CLRN) = (((fc[] == c_rd_IFP_LED)  & fc_str), CLK, NOT SCLR);
v_rd_IFP_IO		.(D, CLK, CLRN) = (((fc[] == c_rd_IFP_IO)   & fc_str), CLK, NOT SCLR);
v_rd_IFP_ID		.(D, CLK, CLRN) = (((fc[] == c_rd_IFP_ID)   & fc_str), CLK, NOT SCLR);

--+--------------------------------------------------------------------------
--| Interface-Karten-Mode 
--+--------------------------------------------------------------------------
v_RD_IF_Mode .(D, CLK, CLRN)             = (((fc[] == C_RD_IF_Mode)  & fc_str), CLK, NOT SCLR);

--+==========================================================================
--| Flag's    
--+==========================================================================
v_Broad_EN.(S, R, CLK, CLRN) = ( ((fc[] == C_res_broadcast) & fc_str)
								,((fc[] == C_set_broadcast) & fc_str),   clk, NOT SCLR);

--+==========================================================================
--| Echo-Daten-Register    
--+==========================================================================
v_ED	 .(data[], clock, enable, aclr) = (DI[], clk, ((fc[] == C_WR_ECHO ) & fc_str),  SCLR);

--+==========================================================================
--| IF-Piggy: LED-Port und LED's+ Output's    
--+==========================================================================
v_IFP_LED .(data[], clock, enable, aclr) = (DI[], clk, ((fc[] == C_WR_IFP_LED ) & fc_str),  SCLR);
v_IFP_Out .(data[], clock, enable, aclr) = (DI[], clk, ((fc[] == C_WR_IFP_Out ) & fc_str),  SCLR);


--+==========================================================================
--| IFA-Daten-Register zur VG-Leiste    
--+==========================================================================
--v_VGD_en .(D, CLK, CLRN) = ( (((fc[] == C_WR_SW1) & fc_str & NOT /JP_LE_SW) OR /JP_LE_SW), clk , NOT SCLR);
--v_VG_Data.(data[], clock, enable, aclr) = (DI[], clk, v_VGD_EN.q,  SCLR);

v_VG_Data.(data[], clock, enable, aclr) = (DI[], clk, VCC,  SCLR);


--+--------------------------------------------------------------------------
--| Selekt für Multiplexer     
--+--------------------------------------------------------------------------

IF			v_RD_STS.q 			THEN v_mux_sel[] = 1; -- Multiplexer auf Status VG-Leiste
	ELSIF	v_RD_IRM.q			THEN v_mux_sel[] = 2; -- Multiplexer auf INR-Maske
	ELSIF	v_RD_CNTRL.q		THEN v_mux_sel[] = 3; -- Multiplexer auf IFA-CTRL (intern)
	ELSIF	v_RD_ID.q			THEN v_mux_sel[] = 4; -- Multiplexer auf IFA-ID Code
	ELSIF	v_RD_vers.q			THEN v_mux_sel[] = 5; -- Multiplexer auf IFA-Epld-Version
	ELSIF	v_RD_echo.q			THEN v_mux_sel[] = 6; -- Multiplexer auf Echo-Daten
	ELSIF	v_RD_I2C.q			THEN v_mux_sel[] = 7; -- Multiplexer auf Daten I2C-Bus
	ELSIF	v_RD_IF_Mode.q		THEN v_mux_sel[] = 8; -- Multiplexer auf Interface-Karten-Mode Register
	ELSIF	v_rd_FWL_Data.q		THEN v_mux_sel[] = 9; -- Multiplexer auf Data des Firmware-Loaders
	ELSIF	v_rd_FWL_STS.q		THEN v_mux_sel[] = 9; -- Multiplexer auf Status des Firmware-Loaders
	ELSIF	v_rd_IFP_LED.q		THEN v_mux_sel[] =10; -- Multiplexer auf IF-Piggy LED-Port
	ELSIF	v_rd_IFP_IO.q		THEN v_mux_sel[] =11; -- Multiplexer auf IF-Piggy LED+Out+In
	ELSIF	v_rd_IFP_ID.q		THEN v_mux_sel[] =12; -- Multiplexer auf IF-Piggy ID-Code
	ELSIF	v_rd_ME_VW_Err.q	THEN v_mux_sel[] =13; -- Multiplexer auf ME_VW_Error_Counter
	ELSIF	v_rd_ME_Data_Err.q	THEN v_mux_sel[] =14; -- Multiplexer auf ME_Data_Error_Counter
	ELSE
		v_mux_sel[] =0;
END IF;


--+==========================================================================
--| Muliplexer für Status und Daten der IFA    
--+==========================================================================

v_IFA_SD_Mux.clock = clk;
v_IFA_SD_Mux.SEL[] = v_mux_sel[];

v_IFA_SD_Mux.Data[0][15..0]  = (DIW[15..0]);						-- Daten-Istwert
v_IFA_SD_Mux.Data[1][15..0]  = (STS[7..0], IFA_ADR[7..0]);			-- Status VG-Leiste
v_IFA_SD_Mux.Data[2][15..0]  = (INRM[7..0], 	 GND,GND,GND,GND,GND,GND,GND,GND);	-- INR-Maske 
v_IFA_SD_Mux.Data[3][15..0]  = (IFA_CTRL[], 	 GND,GND,GND,GND,GND,GND,GND,GND);	-- IFA-CTRL (intern)
v_IFA_SD_Mux.Data[4][15..0]  = (IFA_ID[],   	 GND,GND,GND,GND,GND,GND,GND,GND);	-- IFA-ID Code 
v_IFA_SD_Mux.Data[5][15..0]  = (IFA_Epld_Vers[], GND,GND,GND,GND,GND,GND,GND,GND);	-- IFA-Epld-Version
v_IFA_SD_Mux.Data[6][15..0]  = (v_ED.q[15..0]);						-- Echo-Daten
v_IFA_SD_Mux.Data[7][15..0]  = (GND,GND,GND, I2C_Data[12..0]); 		-- I2C Data 
v_IFA_SD_Mux.Data[8][15..0]  = (IF_Mode[15..0])	;					-- IF-Mode Register
v_IFA_SD_Mux.Data[9][15..0]  = (FWL_Data_STS[15..0]);				-- Data oder Status vom Firmware-Loader
v_IFA_SD_Mux.Data[10][15..0] = (v_IFP_LED.q[15..0]);				-- IF-Piggy LED-Port
v_IFA_SD_Mux.Data[11][15..0] = (IFP_In, v_IFP_Out.q[14..0]);		-- IF-Piggy LED's + Output's + Input
v_IFA_SD_Mux.Data[12][15..0] = (GND,GND,GND,GND,GND,GND,GND,GND, IFP_ID[7..0]);		-- IF-Piggy LED-Port
v_IFA_SD_Mux.Data[13][15..0] = (ME_VW_Err[15..0]);					-- ME_VW_Error_Counter
v_IFA_SD_Mux.Data[14][15..0] = (ME_Data_Err[15..0]);				-- ME_Data_Error_Counter

                                                                      

--+##########################################################################
--|                            Ausgänge 
--+##########################################################################

	FC_EXT			=  v_FC_EXT			.q;
	IFA_FC_INT		=  v_FC_INT			.q;

	SEND_STR		=  v_SEND_STR   	.q;
	Res_vw_err		=  v_res_vw_err		.q;
	Reset_CMD		=  v_reset_cmd		.q;
	Broad_EN		=  NOT v_Broad_EN	.q;
	WR_I2C			=  v_WR_I2C     	.q;
	WR_IRM			=  v_WR_IRM     	.q;	-- Write Interrupt-Maske

	WR_FWL_Data		=	v_WR_FWL_Data	.q;
	WR_FWL_Ctrl		=	v_WR_FWL_Ctrl	.q;

	RD_FWL_Data		=	v_rd_FWL_Data	.q;	-- Read  Data  für Firmware-Loader der IFA
	RD_FWL_STS		=	v_rd_FWL_STS	.q; -- Read Status für Firmware-Loader der IFA

	IFA_SD_Mux[]	=  v_IFA_SD_Mux.result[]; -- Ausgang des Muliplexers
	IFA_SD_Mux_Sel[]=  v_mux_sel[];			  -- Selekt des Muliplexers

	VG_Data[]		=  v_VG_Data.q[];       -- Daten-Ausgang im IFA-Mode zur VG-Leiste

	IFP_Led[]		=  v_IFP_LED.q[];		-- IF-Piggy 'FG 380.751' LED-Port
	IFP_LED_Out[]	=  v_IFP_Out.q[];		-- IF-Piggy 'FG 380.751' Out/LED's

	RD_ME_VW_Err		=	v_rd_ME_VW_Err.q;		-- Read  ME_VW_Error_Counter
	RD_ME_Data_Err		=	v_rd_ME_Data_Err.q;		-- Read  ME_Data_Error_Counter
	WR_CLR_ME_VW_Err	=	v_wr_CLR_ME_VW_Err.q;	-- Clear ME_VW_Error_Counter
	WR_CLR_ME_Data_Err	=	v_wr_CLR_ME_Data_Err.q;	-- Clear ME_Data_Error_Counter

END;