TITLE "IO_6408_a";

FUNCTION SRFFE (S, R, CLK, CLRN, PRN, ENA)	RETURNS (Q);
FUNCTION SRFF  (S, R, CLK, CLRN, PRN)		RETURNS (Q);
FUNCTION DFFE     (D, CLK, CLRN, PRN, ENA)	RETURNS (Q);

FUNCTION lpm_ff (data[LPM_WIDTH-1..0], clock, enable, sclr, sset, sload, aclr, aset, aload)
   WITH (LPM_WIDTH, LPM_AVALUE, LPM_SVALUE, LPM_FFTYPE)
   RETURNS (q[LPM_WIDTH-1..0]);

FUNCTION lpm_compare (dataa[LPM_WIDTH-1..0], datab[LPM_WIDTH-1..0], clock, aclr)
   WITH (LPM_WIDTH, LPM_REPRESENTATION, LPM_PIPELINE, CHAIN_SIZE, ONE_INPUT_IS_CONSTANT)
   RETURNS (alb, aeb, agb, ageb, aneb, aleb);

FUNCTION lpm_shiftreg (data[LPM_WIDTH-1..0], clock, enable, shiftin, load, sclr, sset, aclr, aset)
   WITH (LPM_WIDTH, LPM_DIRECTION, LPM_AVALUE, LPM_SVALUE)
   RETURNS (q[LPM_WIDTH-1..0], shiftout);


CONSTANT c_vw_cnt 			= 17;		-- Start VW-Test 
CONSTANT c_end    			= 18;		-- Stop  VW-Test


SUBDESIGN IO_6408_a

    (
	CLK,				-- System-Clock
	SCLR,				-- Sychron Clear
	SDO,				-- Serial-Data-Out		-+-> (Signale vom '6408' für zu empfangene Daten) 
	DSC,				-- Data-Shift-Clock		 |
	TD,					-- Take-Data			 |
	CDS,				-- Command/Data Synch.	 |
	VW,					-- Valid Word			-+ 
	Res_VW_Err,		    -- Reset Fehlerspeicher für VW-Test
	WR_MIL,			    -- Starte Daten Senden
	Sts_Da[15..0],		-- Sende-Daten 			-+-> (Signale vom/zum '6408' für zu sendende Daten)
	ESC,				-- Encoder-Shift-Clock	 |
	SD,					-- Send-Data			-+
	BZO,				-- Bus-Zero-Out			-+-> (Signale vom '6408' für zu sendende Daten)
	BOO					-- Bus-One-Out			-+

	:Input;		

	RCV_Ready,		  -- Strobe für neue gültige Daten
	CMD_RCV,		  -- CommandwordFunktionscode-Strobe für Piggy
	MIL_RCV_D[15..0], -- Interne Daten
	SDI,			  -- Serial-Data-In (serielle Daten zum '6408' für zu sendende Daten) 
	EE,				  -- Encoder Enable (Startet Sendesequence beim '6408')
	/Send_En,		  -- Enable Signal zur Sender-Freigabe
	/Rcv_En,		  -- Enable Signal zur Empfänger-Freigabe
	Rcv_Err			  -- Zeigt einen Fehler beim Datenempfang.(VW Test)
	: OUTPUT
	)

VARIABLE

	v_Data_in		: lpm_shiftreg	WITH (LPM_WIDTH=16); 
	v_Data_out		: lpm_shiftreg	WITH (LPM_WIDTH=16); 
	v_CMD_Word		: dff;
	v_EE			: srff;
	v_RCV_En		: dff;
	v_RCV_En1		: dff;
	v_RCV_En2		: dff;

	v_VW_Count[4..0]	: DFF;	-- Zähler für VW-Test
	v_VW_Cnt_Syn[4..0]	: DFF;	-- Syc.-Zähler-Stand
	v_VW_OK				: DFF;
	v_VW_OK_T1			: DFF;
	v_VW_OK_T2			: DFF;
	v_VW_OK_syn			: DFF;
	v_ERROR		  		: DFF; 
	v_Rcv_Err			: DFF;

	v_DI 	 		: LPM_FF WITH (LPM_WIDTH=16);	


BEGIN

--+----------------------------------------------------------------------------------------------------------------
--| Shift-Reg. für Empfangene Daten 
--+----------------------------------------------------------------------------------------------------------------
v_Data_in.	(clock, shiftin, sclr) 		= ((DSC AND TD), SDO, SCLR);		

--+----------------------------------------------------------------------------------------------------------------
--| Shift-Reg. für zu sendende Daten. Das Schieberegister wird so lange mit 'SD[15..0]' geladen SD nicht Aktiv ist. 
--+----------------------------------------------------------------------------------------------------------------
v_Data_out.	(data[], clock, load, sclr)	= (Sts_Da[], NOT ESC, NOT SD, SCLR);	

--+--------------------------------------------------------------------------------------------------------
--| Speicher für Command-Word Erkennung. (nur beim Shift-Clk für das 'Data_in' Shift-Reg. ist CDS gültig)   
--+--------------------------------------------------------------------------------------------------------
v_CMD_Word.	(D, CLK, CLRN) = (CDS, (TD AND DSC), NOT SCLR);

--+--------------------------------------------------------------------------
--| Einschaltverzögerung für Empfänger (REC_Enable) nach EE (Sender Start)  
--|  
--| Alle 3 Reg. weden mit  !EE auf '1' gesetzt, somit auch /REC_En = '1'.  
--| Nach 3 pos. Flanken vom ESC, wird /REC_En '0' und somit ist der Empfänger enabled.
--+--------------------------------------------------------------------------
v_RCV_En. (D, CLK, PRN, CLRN) = ( GND,		  	ESC, NOT EE, NOT SCLR);	
v_RCV_En1.(D, CLK, PRN, CLRN) = ( v_RCV_En.q,	ESC, NOT EE, NOT SCLR);	
v_RCV_En2.(D, CLK, PRN, CLRN) = ( v_RCV_En1.q,	ESC, NOT EE, NOT SCLR);	


--+--------------------------------------------------------------------------
--| Encoder_Enable    
--+--------------------------------------------------------------------------
v_EE.(S, R, CLK, CLRN) = ( WR_MIL, SD, CLK, NOT SCLR);

--+==========================================================================
--| Es wird geprüft ob VaildWord innerhalb 16-18us nach TakeData kommt.
--+==========================================================================

	v_VW_Count[].clk  = DSC;
	v_VW_Count[].clrn = NOT SCLR;

	IF v_VW_Count[] == c_end THEN
    	v_VW_Count[] = 0;
	ELSIF TD OR (v_VW_Count[] != 0) THEN
    	v_VW_Count[] = v_VW_Count[] + 1;
	ELSE
    	v_VW_Count[] = v_VW_Count[];
	END IF;


v_VW_Cnt_Syn[]				=	v_VW_Count[];
v_VW_Cnt_Syn[].(CLK, CLRN)	= ( clk, NOT sclr);-- Sychrone Zähler-Bit's

--- Test ob während der Zähler auf 17 steht, die pos. Flanke von VW kommt --

v_VW_OK. (D, CLK)		 = ( ((v_VW_Cnt_Syn[] == c_vw_cnt) & VW), CLK);
--v_VW_OK. (D, CLK)		 = ( ((v_VW_Count[] == c_vw_cnt) & VW), CLK); -- mit nicht Synch. Zählerausgängen


--- Zeitverzögerung und Synchronisation ---

v_VW_OK_t1. (D, CLK)		 = ( v_VW_OK.q,    CLK);	-- Zeitvezögerung
v_VW_OK_t2. (D, CLK)		 = ( v_VW_OK_t1.q, CLK);	-- Zeitvezögerung
v_VW_OK_syn. (D, CLK)		 = ( v_VW_OK_t1.q AND NOT v_VW_OK_t2.q , CLK); --- Synchronisation



v_ERROR.  (D, CLK, CLRN) = ((v_VW_Count[] != c_vw_cnt), VW OR (v_VW_Count[] == c_end), NOT SCLR);
v_RCV_ERR.(D, CLK, CLRN) = ( VCC, v_Error.q, NOT Res_VW_Err);


---------------------------- Output-Daten-Register --------------------------------------
v_DI	  .(data[], clock, enable, sclr) = (v_Data_in.q[],	clk, vw, SCLR);



--+##########################################################################
--|                           Ausgaenge 
--+##########################################################################

RCV_Ready	=	v_VW_OK_syn.q;	  -- Strobe für neue gültige Daten
CMD_RCV		=	v_CMD_Word.q;	  -- CommandwordFunktionscode-Strobe für Piggy
MIL_RCV_D[]	=	v_DI.q[];
RCV_ERR		=	v_RCV_ERR.q;
EE			=	v_EE.q;
/Send_En	=	NOT (BZO != BOO); -- Ausgang für Sender_Enable = (BZO xor BOO)  
/RCV_En		=	v_RCV_En2.q;
SDI			=	v_Data_out.shiftout;

END;


