TITLE "FBCtrl_b";

PARAMETERS (Piggy_ID);

FUNCTION SRFFE (S, R, CLK, CLRN, PRN, ENA)	RETURNS (Q);
FUNCTION SRFF  (S, R, CLK, CLRN, PRN)		RETURNS (Q);
FUNCTION DFF      (D, CLK, CLRN, PRN)		RETURNS (Q);
FUNCTION DFFE     (D, CLK, CLRN, PRN, ENA)	RETURNS (Q);

FUNCTION lpm_ff (data[LPM_WIDTH-1..0], clock, enable, sclr, sset, sload, aclr, aset, aload)
   WITH (LPM_WIDTH, LPM_AVALUE, LPM_SVALUE, LPM_FFTYPE)
   RETURNS (q[LPM_WIDTH-1..0]);

FUNCTION lpm_compare (dataa[LPM_WIDTH-1..0], datab[LPM_WIDTH-1..0], clock, aclr)
   WITH (LPM_WIDTH, LPM_REPRESENTATION, LPM_PIPELINE, CHAIN_SIZE, ONE_INPUT_IS_CONSTANT)
   RETURNS (alb, aeb, agb, ageb, aneb, aleb);

FUNCTION lpm_counter (data[LPM_WIDTH-1..0], clock, clk_en, cnt_en, updown, aclr,
						 aset, aconst, aload, sclr, sset, sconst, sload)
   WITH (LPM_WIDTH, LPM_DIRECTION, LPM_MODULUS, LPM_AVALUE, LPM_SVALUE, CARRY_CNT_EN, LABWIDE_SCLR)
   RETURNS (q[LPM_WIDTH-1..0], eq[15..0]);

FUNCTION lpm_mux (data[LPM_SIZE-1..0][LPM_WIDTH-1..0], sel[LPM_WIDTHS-1..0], clock, aclr) 
   WITH (LPM_WIDTH, LPM_SIZE, LPM_WIDTHS, LPM_PIPELINE)
   RETURNS (result[LPM_WIDTH-1..0]);

FUNCTION lpm_ram_dq (data[LPM_WIDTH-1..0], address[LPM_WIDTHAD-1..0], we, inclock, outclock)
   WITH (LPM_WIDTH, LPM_WIDTHAD, LPM_NUMWORDS, LPM_FILE, LPM_INDATA, LPM_ADDRESS_CONTROL, LPM_OUTDATA)
   RETURNS (q[LPM_WIDTH-1..0]);



----- Funktions-Codes fuer ModulBus -----

CONSTANT c_unused		 = H"00"; -- FKT-Code ohne Funktion  
CONSTANT c_res			 = H"01"; -- FKT-Code Reset 

CONSTANT C_wr_BusData	 = H"10";
CONSTANT C_wr_BusAdr	 = H"11";
CONSTANT C_wr_RamAdr	 = H"62";
CONSTANT C_wr_RamData  	 = H"63";
CONSTANT C_wr_GrpCnt	 = H"64"; -- grp_cnt = Basis-IFK-ADR + n virt IFK-ADR
CONSTANT C_res_SelErr	 = H"75";

CONSTANT C_rd_EPLD_Vers	 = H"8D";
CONSTANT C_rd_Piggy_ID	 = H"8E";
CONSTANT C_rd_BusData	 = H"90";
CONSTANT C_rd_RamData	 = H"99";
CONSTANT C_rd_FB_STS	 = H"9A";
CONSTANT C_rd_GrpCnt	 = H"9B"; -- grp_cnt = Basis-IFK-ADR + n virt IFK-ADR
CONSTANT C_rd_FB_SRQ	 = H"CE";

CONSTANT C_wr_fc_grp_l	 = H"3" ; -- Fkt-Code Gruppe für write  = 30 bis 3F
CONSTANT C_wr_fc_grp_h	 = H"4" ; -- Fkt-Code Gruppe für write  = 40 bis 4F
CONSTANT C_rd_fc_grp	 = H"B" ; -- Fkt-Code Gruppe für read   = B0 bis BF

SUBDESIGN FBCtrl_b

    (
	CLK,					-- System-Clock  
    FB_Mode,				-- Betriebsart der Interface-Karte
    FB_FC_Str,				-- Funktionscode-Strobe	 ______+-+_______
	FC[7..0],				-- Funktionscode
	FB_virt_ADR[3..0],		-- virtuelle IFK-Sub-ADR im Modulbus-Betrieb
	SW_INT[15..0],			-- Daten-Sollwert Intern
	EPLD_Vers[7..0],		-- FB-Piggy EPLD_Vers		
--	Piggy_ID[7..0],			-- FB-Piggy-ID		
	FB_Din[15..0],			-- FB-Data-In		
	SCLR,					-- syn. Clear
	FB_nSRQ[13..1],			-- FB-Service-Request		
	FB_nDtack,				-- FB-DTACK	
	FB_Master4,				-- Reserve-Inputs
	FB_Master7,				-- Reserve-Inputs
	FB_Master10,			-- Reserve-Inputs
	FB_Master11				-- Reserve-Inputs
					:	INPUT;

	Dtack_Test,				-- Zeit-Fenster für DTACK Test
	Dtack_Err_Q,			-- Dtack-Err-Q. ( "1" , wenn kein DTACK auf dem FB )
	Res_Sel_Err,			-- Res_Sel-Err, clear Fehlerspeicher für Dtack-Err
	FB_nSel_Err,			-- Sel-Err-Q, Fehlerspeicher für Dtack-Err
	FB_SD_Mux[15..0],		-- Ausgang des Muliplexers für Daten
	FB_nSend_En,			-- Enable des 'EE-FlipFlops' für den Sender '6408'
	FB_nSend_STR,			-- Send-Strobe zum Starten des 'EE-FlipFlops' für den Sender '6408'
	FB_RD_AKTIV,			-- Sel für Daten vom FB-Teil

	FB_Adr[15..0],			-- FB-ADR		
	FB_nBSEL[13..1],		-- FB Board Select für die Slaves		
	FB_Dout[15..0],			-- FB-Data-Out		
	FB_R/nW,				-- FB-Read / nWrite	
	FB_nDS,					-- FB-Data-Srobe	
	FB_WR,					-- FB write	
	FB_read_Reg,			-- read MB-Bus Register		
	FB_RD,					-- FB read	
    FB_SEL,					-- Sel für FB-Treiber		
	FB_virt_RW,				-- Zugriff auf FB-Bus und RAM bei virt IFK-ADR		
    FB_nSRQ_Sum,			-- Summen-Service-Request vom Fair-Bus		
    FB_FC_Str_Syn			-- 
				:	OUTPUT;
    )


VARIABLE

	FB_RW_SM: MACHINE	WITH STATES	-- State-Machine: Fair-Bus Read oder Write
		 (Idle, Enable, DS_A, DS_W1, DS_W2, DS_W3, DS_W4, DS_W5, DS_End, Disa, Send, ENDE);

	V_FB_RW_SEQ_ff		:	SRFF; -- Read/Write Datenbus Sequence
	V_Enable_ff			:	SRFF; -- Datenbus Enable
	V_DS_ff				:	SRFF; -- Datenstrobe
	V_Dtack_Test_ff		:	SRFF; -- Datenstrobe

    v_FC_STR_Syn		:	DFF;
    v_FC_STR_Syn1		:	DFF;
    v_FC_STR_Syn2		:	DFF;
    v_Dtack_Syn			:	DFF;
	v_FC_FB_RW			:	DFF;
	
	v_RamAdr			:	lpm_ff	WITH (LPM_WIDTH = 16);
	v_FB_ADR			:	lpm_ff	WITH (LPM_WIDTH = 16);
	v_FB_Din			:	lpm_ff	WITH (LPM_WIDTH = 16);
	v_FB_GRP_CNT		:	lpm_ff	WITH (LPM_WIDTH = 4);
    v_FB_Send_En		:	dffe;
    v_FB_Send_STR		:	dffe;
    v_FB_read_Reg		:	dffe;
	v_SEL_RAM_RW		:	dff;	
	v_STR_WR_Ram_WR		:	dffe;	
	v_STR_RD_Ram_WR		:	dffe;	
	v_FB_RD_AKTIV		:	dff;
	v_FB_virt_RW		:	dff;
	v_READ_WR_RAM		:	dff;
	v_READ_RD_RAM		:	dff;
	
	v_GrpCnt			:	dff;
	v_EPLD_Vers			:	dff;
	v_Piggy_ID			:	dff;
	v_FB_STS			:	dff;
	v_FB_SRQ			:	dff;
	
	v_Dtack_Err			:	DFFE;
	v_Sel_Err			:	DFFE;
	v_res_SelErr		:	DFFE;
	v_SEL_FB_D[2..0]	:	NODE;


	v_Ram_ADR_mux		: LPM_MUX WITH (LPM_WIDTH  = 5,		-- Width of the data[][] and result[] ports. 
										LPM_SIZE   = 2,		-- NuFBer of input buses to the multiplexer.
										LPM_WIDTHS = 1);	-- Width of the sel[] input port.
	
	v_FB_ADR_mux		: LPM_MUX WITH (LPM_WIDTH = 16, LPM_SIZE = 3, LPM_WIDTHS = 2);
	v_FB_D_mux			: LPM_MUX WITH (LPM_WIDTH = 16, LPM_SIZE = 8, LPM_WIDTHS = 3, LPM_PIPELINE = 1);
	
	v_FC_WR_Ram			: lpm_ram_dq WITH (LPM_WIDTH   = 16,			-- Width of data[] and q[] ports.
										   LPM_WIDTHAD =  9);			-- Width of the address port.
	v_FC_RD_Ram			: lpm_ram_dq WITH (LPM_WIDTH   = 16,			-- Width of data[] and q[] ports.
										   LPM_WIDTHAD =  8);			-- Width of the address port.
	
	
BEGIN

-----------Enable SM und FF's nur wenn FB_Mode = aktiv -----------
--
	FB_RW_SM.(clk,reset)		= (CLK, (SCLR AND NOT FB_Mode));
	V_DS_ff. (clk,clrn)			= (CLK, (NOT SCLR AND FB_Mode));--Datenstrobe
	V_Dtack_Test_ff. (clk,clrn)	= (CLK, (NOT SCLR AND FB_Mode));--Datenstrobe
	V_Enable_ff. (clk,clrn)		= (CLK, (NOT SCLR AND FB_Mode));--Enable
	V_FB_RW_SEQ_ff. (clk,clrn)	= (CLK, (NOT SCLR AND FB_Mode));--FB_RW_Sequence


	--================================================================================================
--------------------------------- FAIR-Bus Timing  -----------------------------------------------
--================================================================================================
--
--
--
--
--
--
	----- Synchronisation -----

	v_FC_STR_Syn1.  (D, CLK) = ( (FB_Fc_str AND FB_Mode),	    clk); 
	v_FC_STR_Syn2.  (D, CLK) = ( v_FC_STR_Syn1, clk); 
	v_FC_STR_Syn.   (D, CLK) = ( (v_FC_STR_Syn1.q AND (NOT v_FC_STR_Syn2.q)), clk); 

	v_Dtack_syn.	(D, CLK) = ( FB_nDtack,	 clk); 



 ------------------------------ Fair-Bus Timing ---------------------------------------------------

  CASE FB_RW_SM IS
	WHEN Idle =>

	  IF    (v_FC_STR_Syn AND v_FC_FB_RW.q) THEN --- IF Fair-Bus READ or Write

				FB_RW_SM = Enable; --- weiter zum Fairbus Read/Write 
	  ELSE		FB_RW_SM = Idle;  ---- Wait Loop
      END IF;

	WHEN Enable =>	
		 V_FB_RW_SEQ_ff.s	=	VCC; --FB_RW_Sequence =EIN
		 V_Enable_ff.s		=	VCC; --Signal Enable = Ein
		 FB_RW_SM  			=	DS_A; 

	WHEN DS_A =>
		 V_DS_ff.s		=	VCC; --Signal DS = Ein
		 FB_RW_SM  		=	DS_W1; 

	WHEN DS_W1 =>
		 FB_RW_SM  		=	DS_W2; 
	WHEN DS_W2 =>
		 FB_RW_SM  		=	DS_W3; 
	WHEN DS_W3 =>
		 FB_RW_SM  		=	DS_W4; 
	WHEN DS_W4 =>
		 FB_RW_SM  		=	DS_W5; 
	WHEN DS_W5 =>
		 V_Dtack_Test_ff.s	=	VCC; --Signal Dtack_Test = EIN
		 FB_RW_SM  			=	DS_End; 

	WHEN DS_END =>
		 V_DS_ff.r			=	VCC; --Signal DS = AUS
		 V_Dtack_Test_ff.r	=	VCC; --Signal Dtack_Test = AUS
		 FB_RW_SM  			=	Disa; 

	WHEN Disa =>
		 V_Enable_ff.r	=	VCC; --Signal Enable = Aus

		IF (FC7)
			THEN  FB_RW_SM = Send; ----- FC7 = Read-Sequence  
			ELSE  FB_RW_SM = Ende; -- Ende
		END IF;

	WHEN Send =>
		 V_Enable_ff.r	=	VCC;  --Signal Enable = AUS
		 FB_RW_SM 		=	Ende; -- Ende


	WHEN Ende =>
		 V_FB_RW_SEQ_ff.r	=	VCC; --FB_RW_Sequence = AUS
		 FB_RW_SM 		=	Idle; -- Loop

  END CASE;


--+==========================================================================
--| Funktionscodes für read/write auf dem Modul-Bus
--+==========================================================================

	v_FC_FB_RW.(D, CLK, CLRN) =	(  	FB_Mode AND
				   (((fc[]     == C_rd_BusData) AND (FB_virt_ADR[] == 0)) OR	-- read  FB-Data
					((fc[]     == C_wr_BusData) AND (FB_virt_ADR[] == 0)) OR	-- write FB-Data
					 (fc[7..4] == C_wr_fc_grp_l) 						  OR	-- write FC's für FB-Bus
					 (fc[7..4] == C_wr_fc_grp_h)						  OR	-- write FC's für FB-Bus
					 (fc[7..4] == C_rd_fc_grp)     							 )	-- read  FC's für FB-Bus
																, clk, NOT SCLR);

--+=====================================================================================
--| Sel. Signal, wenn Daten vom FB-Teil ausgelesen werden sollen
--+=====================================================================================

	v_FB_RD_AKTIV.(D, CLK) = ( FB_Mode AND 
				   			  (((fc[]     == C_rd_BusData) AND (FB_virt_ADR[] == 0)) OR	-- read  FB-Data
					 	        (fc[7..4] == C_rd_fc_grp)     						 OR	-- read  FC's für FB-Bus
					   			(fc[] == C_rd_EPLD_Vers)	OR
  								(fc[] == C_rd_Piggy_ID)		OR  
				   				(fc[] == C_rd_RamData)    	OR
								(fc[] == C_rd_FB_STS)		OR  
								(fc[] == C_rd_FB_SRQ)		OR  
				   				(fc[] == C_rd_GrpCnt) 			), clk); 

--+=====================================================================================
--| Signal, beim Zugriff auf FB-Bus und RAM bei virt IFK-ADR 
--+=====================================================================================

	v_FB_virt_RW.(D, CLK, CLRN) = ( FB_fc_str AND (FB_virt_ADR[] != 0) AND
			   						((fc[]     == C_wr_RamAdr  ) OR			-- write Ram-ADR
			   						 (fc[7..4] == C_wr_fc_grp_l) OR			-- write FC's für FB-Bus Group 1
									 (fc[7..4] == C_wr_fc_grp_h) OR			-- write FC's für FB-Bus Group 2
									 (fc[7..4] == C_rd_fc_grp)   OR			-- read  FC's für FB-Bus
									 v_STR_WR_Ram_WR OR v_STR_RD_Ram_WR OR	-- RAM write
									 v_READ_WR_RAM   OR v_READ_RD_RAM )		-- RAM read
																		, clk, NOT SCLR);
--+=====================================================================================
--| "EE" Start im FB-Mode für Zugriffe die !!! nicht auf den Modulbus erfolgen
--+=====================================================================================

	v_FB_read_Reg.(D, ENA, CLK, CLRN) = ( FB_fc_str,

						(((FB_virt_ADR[] != 0) AND v_READ_WR_RAM ) OR -- read Daten aus dem RAM der Write-FC's
						 ((FB_virt_ADR[] != 0) AND v_READ_RD_RAM ) OR -- read Daten aus dem RAM der Read-FC's
						           (fc[] == C_rd_GrpCnt)		   OR -- read Group-Count-Register	
						           (fc[] == C_rd_EPLD_Vers)		   OR -- read EPLD-Version	
						           (fc[] == C_rd_Piggy_ID)		   OR -- read Piggy-ID	
						           (fc[] == C_rd_FB_STS)		   OR -- read FB-Status	
						           (fc[] == C_rd_FB_SRQ))		      -- read FB-SRQ	
														  , clk, NOT SCLR);

--+==========================================================================
--| Fair-Bus-Signale
--+==========================================================================

	v_FB_Send_En	.(D,CLK,ENA)  = ((fc[] == C_rd_BusData),  clk,  v_FC_Str_Syn1 );-- FB-Read Seq.

	v_FB_Send_STR	.(D,CLK,ENA)  = ( Send, clk,  ((fc[] == C_rd_BusData) AND NOT v_Dtack_Err.q ));


--+==========================================================================
--| Fair-Bus-Daten-Register 
--+==========================================================================

v_FB_Din.(data[], clock, enable, aclr) = (FB_Din[15..0], CLK, (V_DS_ff), SCLR); 		



--+==========================================================================
--| DTACK-Error   
--+==========================================================================

	-- Error, wenn waehrend des Daten-Strobes (bei v_Dtack_Test_Data.q) Dtack nicht aktiv = '0' ist.
	-- Dtack_Err kann nur waehrend v_SEL_Bus.q aktiv = '1' werden. (NOT v_SEL_Bus.q aktiv = CLRN)
	v_Dtack_Err.(D,CLK,ENA,CLRN) = ( v_Dtack_syn.q, clk, V_Dtack_Test_ff.q, V_FB_RW_SEQ_ff.q);

	-- Error-Speicher, wenn v_Dtack_Err.q oder v_FC_Err.q aktiv = '1' sind.
	v_Sel_Err  .(D,CLK,ENA,CLRN)   = ( VCC, clk, (v_Dtack_Err.q), NOT v_res_SelErr.q );

	v_res_SelErr. (D, CLK, ENA)    = ( v_FC_STR_syn1, clk, fc[] == C_res_SelErr); 


--+==========================================================================
--| Daten-Register 
--+==========================================================================

v_RamAdr    .(data[], clock, enable, aclr) = (SW_INT[],     CLK,  ((fc[] == c_wr_RamAdr) AND v_FC_STR_Syn1), SCLR); 		
v_FB_ADR    .(data[], clock, enable, aclr) = (SW_INT[],     CLK,  ((fc[] == c_wr_BusAdr) AND v_FC_STR_Syn1), SCLR); 		
v_FB_GRP_CNT.(data[], clock, enable, aclr) = (SW_INT[3..0], CLK,  ((fc[] == c_wr_GrpCnt) AND v_FC_STR_Syn1), SCLR); 		


--+==========================================================================
--| Muliplexer RAM-ADR  
--+==========================================================================

	v_SEL_RAM_RW  .(D,CLK,CLRN) = ((    (FB_FC_STR AND (fc[] == C_wr_RamData)) OR 
										(FB_fc_str AND (fc[] == C_rd_RamData)) ), clk, NOT SCLR); 

	v_Ram_ADR_mux.sel[]			= v_SEL_RAM_RW; 
	v_Ram_ADR_mux.data[1][4..0]	= v_RamADR.q[4..0];	-- RAM-ADR für RAM read/write 
	v_Ram_ADR_mux.data[0][4..0]	= FC[4..0];			-- RAM-ADR für FB read/write 	

--+==========================================================================
--| RAM  
--+==========================================================================
	v_STR_WR_Ram_WR	.(D,CLK,ENA)  = ( v_FC_STR_Syn.q, clk,
									((fc[] == C_wr_RamData) AND (v_RamADR.q[15..8] == 0) AND
									 (v_RamADR.q[7..4] == C_wr_fc_grp_l OR v_RamADR.q[7..4] == C_wr_fc_grp_h )) );

	v_FC_WR_Ram.data[]			= SW_INT[15..0];				-- Daten für Ram write
	v_FC_WR_Ram.address[8..4]	= v_Ram_ADR_mux.result[4..0];	-- ADR aus Muliplexer RAM-ADR
	v_FC_WR_Ram.address[3..0]	= FB_virt_ADR[3..0];			-- ADR der virt. IFK
	v_FC_WR_Ram.inclock			= clk;
	v_FC_WR_Ram.outclock		= clk;
	v_FC_WR_Ram.we				= v_STR_WR_Ram_WR;


	v_STR_RD_Ram_WR	.(D,CLK,ENA)  = ( v_FC_STR_Syn.q, clk,
									((fc[] == C_wr_RamData) AND (v_RamADR.q[15..8] == 0) AND
									 v_RamADR.q[7..4] == C_rd_fc_grp) );

	v_FC_RD_Ram.data[]			= SW_INT[15..0];				-- Daten für Ram write
	v_FC_RD_Ram.address[7..4]	= v_Ram_ADR_mux.result[3..0];	-- ADR aus Muliplexer RAM-ADR
	v_FC_RD_Ram.address[3..0]	= FB_virt_ADR[3..0];			-- ADR der virt. IFK
	v_FC_RD_Ram.inclock			= clk;
	v_FC_RD_Ram.outclock		= clk;
	v_FC_RD_Ram.we				= v_STR_RD_Ram_WR;


--+==========================================================================
--| Muliplexer Modulbus-ADR  
--+==========================================================================

	IF (FC[7..4] == C_wr_fc_grp_l OR FC[7..4] == C_wr_fc_grp_h ) THEN v_FB_ADR_mux.sel[] = 1; END IF;
	IF (FC[7..4] == C_rd_fc_grp                                ) THEN v_FB_ADR_mux.sel[] = 2; END IF;

	v_FB_ADR_mux.data[0][15..0]	=    v_FB_ADR.q[15..0];	-- FB-ADR aus dem FB-ADR-Register
	v_FB_ADR_mux.data[1][15..0]	= v_FC_WR_Ram.q[15..0];	-- FB-ADR über Funktionscode aus dem RAM 
	v_FB_ADR_mux.data[2][15..0]	= v_FC_RD_Ram.q[15..0];	-- FB-ADR über Funktionscode aus dem RAM 



--+==========================================================================
--| Muliplexer Modulbus-Daten-Output zur IFA  
--+==========================================================================

	v_READ_WR_RAM.(D,CLK) =	( (fc[] 	== C_rd_RamData) AND (v_RamADR.q[15..8] == 0)   AND
		  					 ((v_RamADR.q[7..4] == C_wr_fc_grp_l) OR
		  					  (v_RamADR.q[7..4] == C_wr_fc_grp_h))   ,CLK);   

	v_READ_RD_RAM.(D,CLK) =	( (fc[] 	== C_rd_RamData) AND (v_RamADR.q[15..8] == 0)   AND
		  					  (v_RamADR.q[7..4] == C_rd_fc_grp)      ,CLK);   


	v_GrpCnt.	(d,clk)	=	((fc[]	== C_rd_GrpCnt)		, CLK);
	v_EPLD_Vers.(d,clk)	=	((fc[] 	== C_rd_EPLD_Vers)	, CLK);
	v_Piggy_ID.	(d,clk)	=	((fc[] 	== C_rd_Piggy_ID)	, CLK);
	v_FB_STS.	(d,clk)	=	((fc[] 	== C_rd_FB_STS)		, CLK);
	v_FB_SRQ.	(d,clk)	=	((fc[] 	== C_rd_FB_SRQ)		, CLK);

	
	IF		v_READ_WR_RAM.q	THEN v_SEL_FB_D[] = 1; 
	ELSIF	v_READ_RD_RAM.q	THEN v_SEL_FB_D[] = 2; 
	ELSIF	v_GrpCnt.q		THEN v_SEL_FB_D[] = 3;
	ELSIF	v_EPLD_Vers.q	THEN v_SEL_FB_D[] = 4;
	ELSIF	v_Piggy_ID.q	THEN v_SEL_FB_D[] = 5;
	ELSIF	v_FB_STS.q		THEN v_SEL_FB_D[] = 6;
	ELSIF	v_FB_SRQ.q		THEN v_SEL_FB_D[] = 7;
	ELSE						 v_SEL_FB_D[] = 0; -- read FB-Daten
	END IF;


	v_FB_D_mux.clock		  	= clk; 
	v_FB_D_mux.sel[]		 	= v_SEL_FB_D[]; 
	v_FB_D_mux.data[0][15..0]	= v_FB_Din.q[15..0];	-- Input-Daten Fair-Bus-Register 
	v_FB_D_mux.data[1][15..0]	= v_FC_WR_Ram.q[15..0];	-- Daten vom "write RAM"  
	v_FB_D_mux.data[2][15..0]	= v_FC_RD_Ram.q[15..0];	-- Daten vom "read RAM"  

	v_FB_D_mux.data[3][15..4] = GND;	v_FB_D_mux.data[3][3..0] = v_FB_GRP_CNT.q[]; -- virt-ADR
	v_FB_D_mux.data[4][15..8] = GND;	v_FB_D_mux.data[4][7..0] = EPLD_Vers[7..0];	 -- EPLD-Version
--	v_FB_D_mux.data[5][15..8] = GND;	v_FB_D_mux.data[6][7..0] = Piggy_ID[7..0];	 -- Piggy-ID
	v_FB_D_mux.data[5][15..8] = GND;	v_FB_D_mux.data[6][7..0] = Piggy_ID;	 	 -- Piggy-ID

	v_FB_D_mux.data[6][15]		=	 v_Dtack_Err.q;	 	
	v_FB_D_mux.data[6][14]		=	 v_Sel_Err.q;	 	
	v_FB_D_mux.data[6][13..4]	=	 GND;	 	
	v_FB_D_mux.data[6][3]		=	 FB_Master11;	 	
	v_FB_D_mux.data[6][2]		=	 FB_Master10;	 	
	v_FB_D_mux.data[6][1]		=	 FB_Master7;	 	
	v_FB_D_mux.data[6][0]		=	 FB_Master4;	 	

	v_FB_D_mux.data[7][15..13]	=	 GND;	 	
	v_FB_D_mux.data[7][12..0]	=	 NOT FB_nSRQ[13..1];	 	




------------ Summen-Service-Request vom Fair-Bus -----------------		

FB_nSRQ_Sum	=	(FB_nSRQ[13] AND FB_nSRQ[12] AND FB_nSRQ[11] AND FB_nSRQ[10] AND		
				 FB_nSRQ[9]  AND FB_nSRQ[8]  AND FB_nSRQ[7]  AND FB_nSRQ[6]  AND		
				 FB_nSRQ[5]  AND FB_nSRQ[4]  AND FB_nSRQ[3]  AND FB_nSRQ[2]  AND FB_nSRQ[1]);

--+==========================================================================
--| Ausgänge 
--+==========================================================================

-------------- Slave-Selekt ---------

CASE v_FB_ADR_mux.result[15..12] IS
	WHEN H"1"		=>	FB_nBSel[13..1] = B"1111111111110"; -- Slave #1
	WHEN H"2"		=>	FB_nBSel[13..1] = B"1111111111101"; -- Slave #2
	WHEN H"3"		=>	FB_nBSel[13..1] = B"1111111111011"; -- Slave #3
	WHEN H"4"		=>	FB_nBSel[13..1] = B"1111111110111"; -- Slave #4
	WHEN H"5"		=>	FB_nBSel[13..1] = B"1111111101111"; -- Slave #5
	WHEN H"6"		=>	FB_nBSel[13..1] = B"1111111011111"; -- Slave #6
	WHEN H"7"		=>	FB_nBSel[13..1] = B"1111110111111"; -- Slave #7
	WHEN H"8"		=>	FB_nBSel[13..1] = B"1111101111111"; -- Slave #8
	WHEN H"9"		=>	FB_nBSel[13..1] = B"1111011111111"; -- Slave #9
	WHEN H"A"		=>	FB_nBSel[13..1] = B"1110111111111"; -- Slave #10
	WHEN H"B"		=>	FB_nBSel[13..1] = B"1101111111111"; -- Slave #11
	WHEN H"C"		=>	FB_nBSel[13..1] = B"1011111111111"; -- Slave #12
	WHEN H"D"		=>	FB_nBSel[13..1] = B"0111111111111"; -- Slave #13
	WHEN OTHERS 	=>	FB_nBSel[13..1] = B"1111111111111";
END CASE;


	FB_Adr[15..12]	=	GND;						-- obere 4 Bit auf GND	
	FB_Adr[11..0]	=	v_FB_ADR_mux.result[11..0];	-- FB-ADR		

	FB_Dout[15..0]	=	SW_INT[15..0];	-- FB-Data-Out		

	FB_SEL			=	V_Enable_ff	.q;	
	FB_nDS			=	NOT	V_DS_ff		.q;	
	FB_R/nW			=	FC7;				-- FB-Read / nWrite	

	FB_WR			=	(V_Enable_ff	.q AND (Not FC7));
	FB_RD			=	v_FB_read_Reg.q;
	FB_RD_AKTIV		=	v_FB_RD_AKTIV .q;	
	FB_read_Reg		=	v_FB_read_Reg.q; -- read FB-Bus Register		

	FB_nSend_En		=	NOT v_FB_Send_En;
	FB_nSend_STR	=	NOT	v_FB_Send_STR;
	FB_SD_MUX[15..0]=	v_FB_D_mux.result[];


	Dtack_Test		=	V_Dtack_Test_ff.q;
	Dtack_Err_Q		=	v_Dtack_Err	  .q;
	FB_nSel_Err		=	v_Sel_Err	  .q;
	Res_Sel_Err		=	v_res_SelErr  .q;

	FB_virt_RW		=	v_FB_virt_RW.q;	
    FB_FC_STR_Syn	=	v_FC_Str_Syn.q;		

END;


