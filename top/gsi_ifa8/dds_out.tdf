TITLE "'DDS_Out' => State-Machine für DDS-Daten Output, Autor: R.Hartmann, Stand: 03.04.02, Vers: V02 ";


FUNCTION SRFF (S, R, CLK, CLRN, PRN)
   RETURNS (Q);

FUNCTION DFF (D, CLK, CLRN, PRN)
   RETURNS (Q);


FUNCTION lpm_dff (data[LPM_WIDTH-1..0], clock, enable, shiftin, shiften, sclr, sset, sconst, aclr, aset, aconst)
   WITH (LPM_WIDTH, LPM_AVALUE, LPM_SVALUE)
   RETURNS (q[LPM_WIDTH-1..0], shiftout);


CONSTANT	Adr_Daten_Byte1		=	H"04";
CONSTANT	Adr_Daten_Byte2		=	H"05";
CONSTANT	Adr_Daten_Byte3		=	H"06";
CONSTANT	Adr_Uebernahme		=	H"80";


SUBDESIGN DDS_Out
(
	CLK:			INPUT;			-- Systemclock															-- 
	Reset:			INPUT;			-- Systemreset															-- 
	FG_MODE:		INPUT;			-- Ist der Mode Funktionsgenerator eingeschaltet?						-- 
	FG_DDS_MODE:	INPUT;			-- Ist der Mode Funktionsgenerator mit DDS-Interface eingeschaltet.		-- 
	FG_NEW_DATA:	INPUT;			-- Neue Daten von Funktionsgenerators bereit.							-- 
	FG[31..8]:		INPUT;			-- Die oberen 24-Bit des Funktionsgenerators							-- 

	New_Data:		OUTPUT;			-- Signal New_Date zur VG-Leiste				--
	FG_DDS[15..0]:	OUTPUT;			-- Daten zur DDS.								--

)

VARIABLE

    v_FG_New_Data_In	:	DFF;
    v_FG_New_Data_Syn	:	DFF;
    v_New_Data_Out		:	SRFF;
	v_FG_DDS_Out		:	lpm_dff		WITH ( LPM_WIDTH = 16 );



DDS_SM:	MACHINE OF BITS (DDS_SM_[3..1])			-- 				--
		WITH STATES (
						Idle,					--	Die Ablaufsteuerung ist im Ruhezustand.			--
						By1,					--	Daten und Strobe für Byte 1.					--
						By1e,					--	Ende Byte 1.									--

						By2, By2e,				--				--
						By3, By3e,				--				--
						By4, By4e,				--				--
						Ende					--				--
					);			

BEGIN

-- +===============================================================================+
-- |		  						Mux New-Data								   |
-- +===============================================================================+

	IF (FG_MODE	AND FG_DDS_MODE)	THEN	New_Data	=	v_New_Data_Out.q;

					ELSE IF FG_MODE THEN	New_Data	=	FG_New_Data;
									ELSE	New_Data	=	GND;
									END IF;
	END IF;

-- +===============================================================================+
-- |		  						Synchronisation								   |
-- +===============================================================================+

v_FG_New_Data_In.   (D, CLK, CLRN) = ( VCC, FG_New_Data, NOT v_FG_New_Data_Syn); 
v_FG_New_Data_Syn.  (D, CLK, CLRN) = ( v_FG_New_Data_In.q, CLK, NOT Reset); 


-- +===============================================================================+
-- |		  						Output-Register								   |
-- +===============================================================================+

v_FG_DDS_Out.(clock, sclr)	=	( CLK, Reset);
v_New_Data_Out.(CLK, CLRN)	=	( CLK, NOT Reset);

FG_DDS[15..0]	=	v_FG_DDS_Out.q[];


-- +===============================================================================+
-- |		  						DDS-Statemachine							   |
-- +===============================================================================+

DDS_SM.(clk, reset) = ( CLK, Reset );


CASE DDS_SM IS
	WHEN Idle =>													
		IF (FG_DDS_MODE AND v_FG_NEW_DATA_Syn.q) THEN DDS_SM = By1;		-- Funktionsg. ist im FG_DDS_mode und New_Data ist aktiv --
											     ELSE DDS_SM = IDLE;	-- wait													 --
		END IF;

		
	WHEN By1  =>	v_FG_DDS_Out.data[7..0] =	Adr_Daten_Byte1;	-- Set HI-Daten-ADR			
					v_FG_DDS_Out.data[15..8]=	FG[31..24];			-- Set HI-Daten-Byte		
					v_FG_DDS_Out.Enable		=	VCC;				-- Enable für Daten				
					DDS_SM 					= 	By1e;				-- Byte 1 Ende				
	
	WHEN By1e =>	v_New_Data_Out.s		=	VCC;				-- Set New_Data (Strobe) für Byte 1		
					DDS_SM 					= 	By2;				-- Byte 1 Ende				
	
	
	WHEN By2  =>	v_New_Data_Out.r		=	VCC;				-- Reset New_Data (Strobe) für Byte 1	
					--
					v_FG_DDS_Out.data[7..0] =	Adr_Daten_Byte2;	-- Set Mid-Daten-ADR		
					v_FG_DDS_Out.data[15..8]=	FG[23..16];			-- Set Mid-Daten-Byte		
					v_FG_DDS_Out.Enable		=	VCC;				-- Enable für Daten				
					DDS_SM 					= 	By2e;				-- Byte 2 Ende				
						
	WHEN By2e =>	v_New_Data_Out.s		=	VCC;				-- Set New_Data (Strobe) für Byte 2		
					DDS_SM 					= 	By3;				-- Byte 2 Ende				
		
		
	WHEN By3  =>	v_New_Data_Out.r		=	VCC;				-- Reset New_Data (Strobe) für Byte 2	
					--
					v_FG_DDS_Out.data[7..0] =	Adr_Daten_Byte3;	-- Set Lo-Daten-ADR			
					v_FG_DDS_Out.data[15..8]=	FG[15..8];			-- Set Lo-Daten-Byte			
					v_FG_DDS_Out.Enable		=	VCC;				-- Enable für Daten			
					DDS_SM 					= 	By3e;				-- Byte 3 Ende				
						
	WHEN By3e =>	v_New_Data_Out.s		=	VCC;				-- Set New_Data (Strobe) für Byte 3	
					DDS_SM 					= 	By4;				-- Byte 3 Ende				
		
		
	WHEN By4  =>	v_New_Data_Out.r		=	VCC;				-- Reset New_Data (Strobe) für Byte 3
					--
					v_FG_DDS_Out.data[7..0] =	Adr_Uebernahme;		-- Set Übern.-CMD-ADR		
					v_FG_DDS_Out.data[15..8]=	GND;				-- Set Übern.-CMD-Daten-Byte
					v_FG_DDS_Out.Enable		=	VCC;				-- Enable für Daten			
					DDS_SM 					= 	By4e;				-- Byte 4 Ende				
						
	WHEN By4e =>	v_New_Data_Out.s		=	VCC;				-- Set New_Data (Strobe) für Byte 4	
					DDS_SM 					= 	Ende;				-- Byte 4 Ende					
						
					
	WHEN Ende =>	v_New_Data_Out.r		=	VCC;				-- Reset New_Data (Strobe) für Byte 4
					DDS_SM 					= 	IDLE;				-- Ende --> Ruhezustand			


END CASE;



---------------------------------------------------------------------------------------------------
END;

